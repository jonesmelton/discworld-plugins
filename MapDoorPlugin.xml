<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Map-Door-Text parser created by Quow -->

<!-- "help mdt" in Mushclient once installed.  Configure your personal highlights and values in the list below by editing this file -->
<!-- For quickly finding rooms with suitable/worthwhile targets in, or highlighting or even ignoring particular players/NPCs -->
<!-- Supports "options output map written = on"  and  "map door text" -->

<muclient>
<plugin
   name="QuowMDT"
   author="Quow"
   id="bff25308e015986fb1a56e3e"
   language="Lua"
   purpose="MapDoorText Parser"
   date_written="2016-09-05"
   save_state="y"
   requires="4.84"
   version="0.01"
   >
</plugin>
<script>
<![CDATA[
-- ********************************************************************
-- *****            Quows' Map Door Text MDT Functions            *****
-- ********************************************************************
-- Rooms which have a total "value" below this will not be listed (can be changed in-client with "mdt limit <value>")
iMinimumRoomValue = 1

-- Set "bShowHiddenRoomCount" to false if you don't want to see number of rooms hidden because of low value each time
bShowHiddenRoomCount = true

-- Default value of anything not coloured (excludes playernames if you have playercolours set Discworld side)
-- This value is only used if the "thing" is not matched to anything in the highlight table below
iDefaultValue = 1

-- Players are always given this "bonus value" if detected because they have a different playername (options colour playername=xxx)
-- This can be a negative value if you want to make rooms with a player already in less likely to show up (eg a value of -100 per player)
iBonusPlayerValue = 0

-- Affects the sort-order of rooms by points... true puts highest-value rooms bottom of the list/last, false sets them first/top
bReverseSortOrder = true

-- **************************************
-- ***** Name highlights and Values *****
-- **************************************
-- IMPORTANT:  Keep all string matches lower case only, no capitals!
-- Be careful of partial matches, eg "rat" could match on "brat".
-- Matches do NOT include any "quantity text" at the start of their text
-- eg "a <name>", "an <name>", "the <name>", "two <name>", "three <name>"   <- All of these are just treated as "<name>"
--
--
-- First variable is the string to match on - either a "plaintext" string (careful, this means "rat" could match "annoying brat")...
-- ... or a "regular expression" or regex string, allowing you to do more advanced, specific matchings.
--
-- Second variable is a "category" for this match - if left blank, then this match is "always on", and this should be the default.
-- However you could assign a set of matches to the "loot" category - allowing you to quickly turn off and on NPCs you like to hunt
-- when just looking for money/loot, but not have them match when you are hunting in a group.
-- Or a "solo" category which adds a bunch of extra NPCs in you only hunt while you are solo.
-- Or a "djb" category to only have priests highlighted in red and wealthy NPCs when you are in DJB
-- You can quickly switch to a category in Mushclient by typing "mdt category <category>" - to show default only, use "mdt category default"
--
-- Third variable is a colour you want to highlight this match as.  You can leave blank if you want no colour change at all.
--
-- Fourth variable is a "value" for each one of these NPCs - you could have zero or even negative values to make rooms with these
-- NPCs/players in unlikely to appear.  The value is "per NPC" - so an imperial guard with value 20, would make a room value 40 if there
-- were 2 of them.
--
-- Fifth value is to mark regex strings - a 5th value of "true" lets the plugin know this is a special regex string match.
-- You can leave the 5th value out altogether if it's a regular string match (ie, not a regex string).
--
-- For example;
-- {"cockroach", "", "", 0},
-- For a plain match on "cockroach", in the "default" match category, with no colour change, and 0 value
--
-- Or;
-- {"imperial guard",  "grouped",  "orange",  25},
-- For imperial guards in a category named "grouped", highlighted orange and a value of 25 per imperial guard found
--
-- You could put PK player names in with a high room value, for example
-- {"balrog", "", "pink", 2000},
-- To highlight balrog in pink, in the default category, with a high value so any rooms with him in are likely listed first
--
-- You can use regular expresses (regex) for your strings - in which case you must set the otherwise optional 5th variable to "true"
-- For example;
-- {"(.+?) (tang|sung|mcsweeney|fang|hong) noblem(en|an)",   "", "orange", 10, true},
-- To only match the BP family nobleman/noblemen, without noblemen in other places, such as Sto-Lat, triggering.
--
--
--
-- Remember all strings are matches to a lower-case string - so ***** KEEP IT ALL LOWERCASE  *****
--
-- Also remember the matches do NOT include any "quantity text" at the start of their text
-- eg "a <name>", "an <name>", "the <name>", "two <name>", "three <name>"   <- All of these are just treated as "<name>"
--


-- Colours:  "", "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white"
-- Or you can use hex-codes, eg "#C0C0C0" for a grey-white, etc.
sMDTMatches = 
{ 
  -- Default matches to always appear regardless of category setting
  -- lowercase only match string------Category--Highlight--Value--Regex?
  {"imperial guard",                  "",       "orange",     10},  -- Imperial guards, orange, 10 value each
  {"palace guard",                    "",       "orange",     10},  -- Palace guards, orange, 10 each
  {"ceremonial guard",                "",       "orange",     10},  -- Ceremonial guards, orange, 10 each
  {"royal guard",                     "",       "orange",      5},  -- Royal guards, orange, 5 each
  {"recruit",                         "",       "orange",      2},  -- Recruits, no colour change, 2 each
  {"soldier",                         "",       "orange",      4},  -- Soldiers, no colour change, 4 each
  {"hoplite",                         "",       "orange",     10},  -- Hoplites, orange, 10 value each
  {"citadel guard",                   "",       "orange",     15},  -- Citadel guards, orange, 15 value each
  {"philosopher",                     "",       "",            3},  -- Philosophers, no colour change, 3 each
  {"d'reg",                           "",       "",            2},  -- D'regs, no colour change, 2 each
  {"knight",                          "",       "orange",      4},  -- Knights, orange, 4 each
  {"student",                         "",       "",            4},  -- Students (intended for Dojo), no colour, 4 value each
  {"little old ladies",               "",       "orange",      2},  -- Little old ladies, the groups in AM, orange and 2 value each
  {"hunter grflx",                    "",       "",            3},  -- GRFLX, no colours, 3 points
  {"grflx mentor",                    "",       "",            3},  -- GRFLX, no colours, 3 points
  {"grflx adolescent",                "",       "",            2},  -- GRFLX, no colours, 2 points
  {"grflx worker",                    "",       "",            3},  -- GRFLX, no colours, 3 points
  {"grflx workleader",                "",       "",            3},  -- GRFLX, no colours, 3 points

  -- RegEx matches for BP things
  {"^(.+?) (tang|sung|mcsweeney|fang|hong) bodyguards{0,1}$", "", "orange", 4, true}, -- 4 For bodyguards
  {"^(.+?) (tang|sung|mcsweeney|fang|hong) noblem(en|an)$",   "", "orange", 3, true}, -- 3 for noblemen

  -- Regex for Sto-Lat things
  {"^(muscular|hulking|smirking|brooding|grinning|tough|scruffy|shady|suspicious|dashing|knowing|scarred|leering) (highwaym|character|runaway|vagrant|thug|m(an|en)|wom(an|en)).*$", "", "orange", 2, true}, 
  -- "loot" category to match only if the user sets "mdt category loot"
  {"^(.+?) noble(man|men|woman|women)$",      "loot", "green",     5, true},  -- Nobleman but NOT the BP ones, green, 5 value, regex
  {"^rich (m(an|en)|wom(an|en))$",            "loot", "green",     5, true},  -- Rich men, rich women, green 5 value regex
  {"^(.+?) (courtier)s{0,1}$",                "loot", "green",     5, true},  -- Courtiers, green 5 value regex
    -- "components" category, for wizzards
  {"^wizards{0,1}$",                    "components", "#C0C0C0",   2, true},  -- Wizzards, for components

  -- Regex matches for DJB things
  {"^(.+?) pries(t|ts|tess|tesses)$",              "", "",          0, true}, -- Priests, zero value
  -- "loot" category to match only if the user sets "mdt category loot"
  {"^(.+?) wealthy (man|men|woman|women)$",    "loot", "green",     5, true},  -- Wealthy NPCs, "loot" hunt list only, green, 5 value, regex
  {"^rich ambassador(.?)",                     "loot", "green",     5, true},  -- Rich ambassadors, "loot" hunt list only, green, 5 value, regex

  -- Genua things
  {"^(muscular|immaculate|charming|refined|well-dressed) gentle(man|men|woman|women)$",    "loot", "green",     5, true},  -- Gentlemen and women, "loot" hunt list only, green, 5 value, regex
  {"^(rich|affluent|well-off) citizens{0,1}$",                "loot", "green",     5, true},  -- Gentlemen and women, "loot" hunt list only, green, 5 value, regex
  {"^(baron|baroness|duchess|duke|countess|count) (.+?)$",    "loot", "green",     5, true},  -- Baroness Dukes etc. "loot" hunt list only, green, 5 value, regex

  -- 0 value things below that you don't want giving any values to rooms at all, default/all categories
  -- lowercase only match string------Category--Highlight--Value--Regex?
  {"skeleton warrior",                "",       "",           0},
  {"giant fruitbat",                  "",       "",           0},
  {"fireflies",                       "",       "",           0},
  {"small blue light",                "",       "",           0},
  {"cloud",                           "",       "",           0},
  {"tortoise",                        "",       "",           0},
  {"cockroach",                       "",       "",           0},
  -- Regex rats, cats, dogs to avoid them matching to other NPCs, like "brat", "catcher", "dogged" etc.
  {"(.+?)rats{0,1}$",                 "",       "",           0, true}, 
  {"(.+?)cats{0,1}$",                 "",       "",           0, true},
  {"(.+?)dogs{0,1}$",                 "",       "",           0, true},


} -- End of the match table, make sure every line of your matches above had a comma at the very end of the line

-- Lowercase only!!!





-- **********************************************
-- *****            Code Below              *****
-- **********************************************
-- Don't change anything below this point unless you know what you are doing!




-- **********************************************************************
-- *                          Help File Text                            *
-- **********************************************************************
function QuowMDTHelp (sName, sLine, wildcards)
  ColourNote("orange", "black", "Quow's MapDoorText Plugin:")
  Note("'help mdt'                 :  This help information")
  Note("'mdt auto on'              :  Enables 'options output map written' for auto MDT every room move")
  Note("'mdt auto off'             :  Disables 'options output map written' for auto MDT every room move")
  Note("'mdt limit <value>'        :  Set <value> as the minimum value for rooms to be displayed, default 1")
  Note("                              Current value limit is:  " .. tostring(iMinimumRoomValue))
  Note("'mdt category'             :  Only match things in the default/global category match list")
  Note("'mdt category <category>'  :  Display matches from <category> match list along with the global category")
  if (sMDTCategory == "") then
    Note("                              Current highlight category:  default only, no category specified.")
  else
    Note("                              Current highlight category: '" .. sMDTCategory .. "'")
    -- Count up how many things in this category we have
    local iCatCount = 0
    for sKey, sValue in pairs (sMDTMatches) do
      if (sValue[2] == sMDTCategory) then
        iCatCount = iCatCount + 1
      end
    end
    if (iCatCount == 0) then
      Note("                              [there are NO matches in your highlight list matching this category name]")
    else
      Note("                              [there are " .. tostring(iCatCount) .. " matches in your highlight list within this category]")
    end
  end
end

-- User commands for the MDT settings
function QuowMDT (sName, sLine, wildcards)
  local sArgument = string.sub(sLine, 5)
  if (sArgument == "") then
    return
  end
  sArgument = string.lower(sArgument)
  if (sArgument == "auto on") then
    ColourNote("orange", "black", "Enabling automatic MDT with 'options output map written=on'")
    Send("options output map written=on")
  elseif (sArgument == "auto off") then
    ColourNote("orange", "black", "Disabling automatic MDT with 'options output map written=off'")
    Send("options output map written=off")
  elseif (string.starts(sArgument, "limit ") or string.starts(sArgument, "value ")) then
    local sThisVal = string.sub(sArgument, 7)
    if (sThisVal ~= nil and sThisVal ~= "") then
      iMinimumRoomValue = tonumber(sThisVal)
      ColourNote("orange", "black", "Minimum room value to be listed in MDT output is now: " .. tostring(iMinimumRoomValue))
      SetVariable("iMinimumRoomValue", tostring(iMinimumRoomValue))
    end
  elseif (string.starts(sArgument, "category")) then
    local sThisVal = string.sub(sArgument, 10)
    if (sThisVal == nil) then
      sThisVal = ""
    end
    if (sThisVal == "none" or sThisVal == "default") then
      sThisVal = ""
    end
    sThisVal = string.lower(sThisVal)
    if (sThisVal == "") then
      ColourNote("orange", "black", "Highlight category set to default only - extra category groups are now all off/ignored.")
    else
      ColourNote("orange", "black", "Highlight category set to: '" .. sThisVal .. "'.  Matches in this category will be included.")
      -- Count up how many things in this category we have
      local iCatCount = 0
      for sKey, sValue in pairs (sMDTMatches) do
        if (sValue[2] == sThisVal) then
          iCatCount = iCatCount + 1
        end
      end
      if (iCatCount == 0) then
        ColourNote("red", "black", "Note:  There were NO matches found set to this category.  Double-check you set the correct categories!")
      else
        ColourNote("orange", "black", "Note:  There are " .. tostring(iCatCount) .. " matches within this category.")
      end
    end
    sMDTCategory = sThisVal
    SetVariable("sMDTCategory", sMDTCategory)
  end 
end


-- Can we find a saved variable for room value
iTempVariable = tonumber(GetVariable("iMinimumRoomValue"))
if (iTempVariable ~= nil) then
  iMinimumRoomValue = iTempVariable
end

-- Displaying a category
sMDTCategory = GetVariable("sMDTCategory")
if (sMDTCategory == nil) then
  sMDTCategory = ""
end

-- On plugin close, save value
function OnPluginClose ()
  SetVariable("iMinimumRoomValue", tostring(iMinimumRoomValue))
  SetVariable("sMDTCategory", sMDTCategory)
end
function OnPluginSaveState ()
  SetVariable("iMinimumRoomValue", tostring(iMinimumRoomValue))
  SetVariable("sMDTCategory", sMDTCategory)
end

-- Convert to regex in MDTMatches, in advance
for sString, objMatch in pairs(sMDTMatches) do
  -- Is this a regex?  Create the regex matcher in advance
  if (objMatch[5] ~= nil and objMatch[5] == true) then
    objMatch[6] = rex.new(objMatch[1])
  end
  -- String-to-lower the category name just in case the user didn't
  objMatch[2] = string.lower(objMatch[2])
end

-- Convert string numbers to numeric values
sQuowNums = 
{
  ["a "] = 1,
  ["an "] = 1,
  ["the "] = 1,
  ["one "] = 1,
  ["two "] = 2,
  ["three "] = 3,
  ["four "] = 4,
  ["five "] = 5,
  ["six "] = 6,
  ["seven "] = 7,
  ["eight "] = 8,
  ["nine "] = 9,
  ["ten "] = 10,
  ["eleven "] = 11,
  ["twelve "] = 12,
  ["thirteen "] = 13,
  ["fourteen "] = 14,
  ["fifteen "] = 15,
  ["sixteen "] = 16,
  ["seventeen "] = 17,
  ["eighteen "] = 18,
  ["nineteen "] = 19,
  ["twenty "] = 20,
  ["twenty-one "] = 21,
  ["twenty-two "] = 22,
  ["twenty-three "] = 23,
  ["twenty-four "] = 24,
  ["twenty-five "] = 25,
  ["twenty-six "] = 26,
  ["twenty-seven "] = 27,
  ["twenty-eight "] = 28,
  ["twenty-nine "] = 29,
  ["thirty "] = 30,
}

-- Convert all movement strings to short form
sMovementShort = {
  ["north"] = "n",
  ["northeast"] = "ne",
  ["east"] = "e",
  ["southeast"] = "se",
  ["south"] = "s",
  ["southwest"] = "sw",
  ["west"] = "w",
  ["northwest"] = "nw",
  ["n"] = "n",
  ["ne"] = "ne",
  ["e"] = "e",
  ["se"] = "se",
  ["s"] = "s",
  ["sw"] = "sw",
  ["w"] = "w",
  ["nw"] = "nw",
}

-- For the table-sort function
function QuowValueCompare(a, b)
  if (bReverseSortOrder == true) then
    return a[4] < b[4]
  else
    return a[4] > b[4]
  end
end

-- ************************************************************
-- *****           Special String Functions               *****
-- ************************************************************
-- Explode will split a string based on a delimiter into an array
function explode(div,str) 
  if (div=='') then return false end
  local pos,arr = 0,{}
  -- for each divider found
  for st,sp in function() return string.find(str,div,pos,true) end do
    table.insert(arr,string.sub(str,pos,st-1)) -- Attach chars left of current divider
    pos = sp + 1 -- Jump past current divider
  end
  table.insert(arr,string.sub(str,pos)) -- Attach chars right of last divider
  return arr
end
-- Check if a string starts with another string
function string.starts(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end
-- Check if a string ENDS in another string
function string.ends(String,End)
   return End=='' or string.sub(String,-string.len(End))==End
end


-- ***********************
-- * Vision text handler *
-- ***********************

function QuowHandleDoorTextFull( sName, sLine, wildcards, styles )
  -- Grab player names in advance
  local iRegexMatch = 0
  local iLength = 0
  local sMatchings = ""
  local sPlayers = {}
  local iPlayerColour = 0
  local iNonPlayerColour = 0
  local iLastColour = 0
  local objRegEx = rex.new ("^[a-zA-Z](\\S*\\s*){0,4}$")
  for sKey, sValue in ipairs (styles) do
    for sKey2, sValue2 in pairs(sValue) do
      if (sKey2 == "textcolour") then
        iLastColour = tonumber(sValue2)
      elseif (sKey2 == "text") then
        iRegexMatch, iLength, sMatchings = objRegEx:match (sValue2)
        --print(iRegexMatch, iLength, sMatchings)
        if (iRegexMatch ~= nil and iRegexMatch == 1) then
          sPlayers[string.lower(sValue2)] = iLastColour
          iPlayerColour = iLastColour
        else
          iNonPlayerColour = iLastColour
        end
      end
    end
  end -- for each style run

  local sNextColour = ""
  local bNothing = true
  -- Uncomment below to enable debug output
  --Note("Mapping text=" .. sLine)

  -- Make the input all lowercase to make matching easier
  local sFullLine = string.lower(sLine)
  sFullLine = string.gsub(sFullLine, " are ", " is ")
  sFullLine = string.gsub(sFullLine, " black and white ", " black white ")
  sFullLine = string.gsub(sFullLine, "the limit of your vision is ", "the limit of your vision:")
  sFullLine = string.gsub(sFullLine, " and ", ", ")
  sFullLine = string.gsub(sFullLine, " is ", ", ")

  -- Now turn it into a table to process bit by bit
  local sCountTable = explode(", ", sFullLine)
  local sLastDirection = ""
  local sLastEnemyLine = ""
  local iLastCount = 0
  local iLastWasDir = 0
  local iEnemiesBySquare = {}
  local bIgnoringExits = false
  local objEntityTable = {}
  local iRoomID = 1
  local iRoomValue = 0
  local iLongestDirection = 0
  -- Loop through every entity
  for iMonKey, sStringCut in pairs (sCountTable) do
    if (sStringCut ~= "" and string.find(sStringCut, " of a ") == nil) then
      --Note("String A:" .. sStringCut)
      if (string.starts(sStringCut, "doors ") or string.starts(sStringCut, "a door ") or string.starts(sStringCut, "exits ") or string.starts(sStringCut, "an exit ")) then
        --Note("Special exiter, ignore this line?  Next line is processed...")
        bIgnoringExits = true
      elseif (string.starts(sStringCut, "the limit of your vision:")) then
        -- End of segment
        if (iLastCount > 0) then
          local iThisSquare = { iLastCount, sLastDirection, iRoomID, math.floor(iRoomValue) }
          table.insert(iEnemiesBySquare, iThisSquare)
          bNothing = false
          sNextColour = ""
          iRoomID = iRoomID + 1
          iRoomValue = 0
        end
        sLastDirection = ""
        sLastEnemyLine = ""
        iLastCount = 0
        iLastWasDir = 0
      else
        -- Find the quantity first
        local iQuantity = 1
        for sQuantKey, iQuanValue in pairs (sQuowNums) do
          if (string.starts(sStringCut, sQuantKey)) then
            iQuantity = tonumber(iQuanValue)
            sStringCut = string.sub(sStringCut, string.len(sQuantKey) + 1)
            break
          end
        end

        -- Direction or not?
        local iIsDir = 0
        local sThisDir = ""
        if (string.starts(sStringCut, "northeast")) then
          iIsDir = 1
          sThisDir = "northeast"
        elseif (string.starts(sStringCut, "northwest")) then
          iIsDir = 1
          sThisDir = "northwest"
        elseif (string.starts(sStringCut, "southeast")) then
          iIsDir = 1
          sThisDir = "southeast"
        elseif (string.starts(sStringCut, "southwest")) then
          iIsDir = 1
          sThisDir = "southwest"
        elseif (string.starts(sStringCut, "north")) then
          iIsDir = 1
          sThisDir = "north"
        elseif (string.starts(sStringCut, "east")) then
          iIsDir = 1
          sThisDir = "east"
        elseif (string.starts(sStringCut, "south")) then
          iIsDir = 1
          sThisDir = "south"
        elseif (string.starts(sStringCut, "west")) then
          iIsDir = 1
          sThisDir = "west"
        end
        if (iIsDir == 1) then
          if (bIgnoringExits == false) then
            --Note("  [handling direction, not exits]")
            iLastWasDir = 1
            if (sLastDirection ~= "") then
              sLastDirection = sLastDirection .. ", "
            end
            sLastDirection = sLastDirection .. tostring(iQuantity) .. " " .. sMovementShort[sThisDir]
          else
            --Note(" [ignoring exits directions line]")
          end
        else
          bIgnoringExits = false
          if (iLastWasDir == 1) then
            -- reset count
            if (iLastCount > 0) then
              local iThisSquare = { iLastCount, sLastDirection, iRoomID, math.floor(iRoomValue) }
              table.insert(iEnemiesBySquare, iThisSquare)
              bNothing = false
              sNextColour = ""
              iRoomID = iRoomID + 1
              iRoomValue = 0
            end
            sLastDirection = ""
            sLastEnemyLine = ""
            iLastCount = 0
            iLastWasDir = 0
          end

          sNextColour = ""

          -- Value of this NPC, start with the default
          local iThisValue = iDefaultValue

          -- Check if this is a player to colour/highlight
          local bAddPlayerValue = false
          if (sPlayers[sStringCut] ~= nil) then
            if (sPlayers[sStringCut] ~= iNonPlayerColour) then
              sNextColour = RGBColourToName(iPlayerColour)
            end
          end

          -- Search the table of map-door-text string matches to look for enemies to highlight
          for sKey, sValue in pairs (sMDTMatches) do
            -- First check if it's the default category, or our current selected category
            if (sValue[2] == "" or sValue[2] == sMDTCategory) then
              -- Now check if this is a regular string match, or a regex match
              if (sValue[5] == nil or sValue[5] ~= true) then
                -- Regular string matching
                if (string.find(sStringCut, sValue[1])) then
                  sNextColour = sValue[3]
                  iThisValue = sValue[4]
                  break
                end
              elseif (sValue[5] == true) then
                -- Regex string matching
                iRegexMatch, iLength, sMatchings = sValue[6]:match (sStringCut)
                --Note("String: '" .. sStringCut .. "' vs '" .. sValue[1] .. "'")
                if (iRegexMatch ~= nil and iRegexMatch == 1) then
                  sNextColour = sValue[3]
                  iThisValue = sValue[4]
                  break
                end
              end
            end 
          end
          if (bAddPlayerValue == true) then
            iThisValue = iThisValue + iBonusPlayerValue
          end
          iRoomValue = iRoomValue + (iThisValue * iQuantity)

          if (iQuantity > 1) then
            sStringCut = iQuantity .. " " .. sStringCut
          end
          table.insert(objEntityTable, {iRoomID, sStringCut, sNextColour})

          iLastCount = iLastCount + iQuantity
          if (sLastEnemyLine ~= "") then
            sLastEnemyLine = sLastEnemyLine .. ", "
          end
          sLastEnemyLine = sLastEnemyLine .. sStringCut
        end
      end -- Limit of vision or not
    end -- Not empty not corpse
  end -- Loop through comma-seperated

  if (bNothing == true) then
    Note("Nothing seen, try elsewhere!")
  else
    table.sort(iEnemiesBySquare, QuowValueCompare)
    local bDoneHere = false
    local iRoomsIgnored = 0

    -- Grab shortest
    for iKey, sValue in pairs (iEnemiesBySquare) do
      -- Only show if this room has at least "iMinimumRoomValue" value
      if (sValue[4] >= iMinimumRoomValue and string.len(sValue[2]) > iLongestDirection) then
        iLongestDirection = string.len(sValue[2])
      end
    end

    for iKey, sValue in pairs (iEnemiesBySquare) do
      -- Only show if this room has at least "iMinimumRoomValue" value
      if (sValue[4] >= iMinimumRoomValue) then
        bDoneHere = false
        Tell(string.format("%-" .. iLongestDirection .. "s ", sValue[2]) .. "[")
        ColourTell("orange", "", sValue[4])
        Tell("] ")
        for sTKey, objEntity in pairs(objEntityTable) do
          if (objEntity[1] == sValue[3]) then
            if (bDoneHere == true) then
              Tell(", ")
            end
            ColourTell(objEntity[3], "", objEntity[2])
            bDoneHere = true
          end
        end
        Tell(" [" .. sValue[1] .. " thing")
        if (sValue[1] > 1) then
          Tell("s")
        end
        Tell("]")
        Note("")
      else
        iRoomsIgnored = iRoomsIgnored + 1
      end
      iEnemiesBySquare[sValue] = nil
    end
    for sTKey, objEntity in pairs(objEntityTable) do
      objEntityTable[sTKey] = nil
    end
    if (iRoomsIgnored > 0 and bShowHiddenRoomCount == true) then
      Note("(" .. tostring(iRoomsIgnored) .. " rooms below your value limit of " .. tostring(iMinimumRoomValue) .. ")")
    end
  end
end

]]>
</script> 
<!--  Triggers  -->
<triggers>
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^[a-zA-Z](.+?) and the limit of your vision is (.+?)( from)? here\.$"
   omit_from_output="y"
   sequence="5"
   script="QuowHandleDoorTextFull"
   regexp="y"
   name="DoorTextFull"
  >
  </trigger>
</triggers>
<!--  Aliases  -->

<aliases>
  <alias
   match="help mdt"
   enabled="y"
   ignore_case="y"
   sequence="30"
   script="QuowMDTHelp"
  > 
  </alias>
  <alias
   match="mdt *"
   enabled="y"
   ignore_case="y"
   sequence="30"
   script="QuowMDT"
  > 
  </alias>
</aliases>
<!--  Timers  -->
<timers>
</timers>
</muclient>
